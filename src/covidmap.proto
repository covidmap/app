
/**
 * Specifies the data model and API interface for the *COVID Impact Map* application, which accepts crowd-sourced
 * reports regarding COVID-19/Novel Coronavirus impact on the global healthcare system. To learn more about this project
 * visit us on [Github](https://github.com/covidmap).
 */
syntax = "proto3";

package covidmap;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option java_outer_classname = "COVIDMapApp";
option php_namespace = "ElideSamples";
option php_class_prefix = "TDL";
option swift_prefix = "COVIDMap";
option objc_class_prefix = "TDL";
option ruby_package = "CovidMap::Schema";
option java_package = "covidmap.schema";
option csharp_namespace = "CovidMap.Schema";
option go_package = "github.com/covidmap/app;covidmap";

import "google/type/latlng.proto";

import "google/api/client.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "gust/core/datamodel.proto";


// Describes the notion of a known health-care facility, tracked by the app for report submission correlation/matching.
message Facility {
  // Describes a key that uniquely addresses a `Facility` record.
  message FacilityKey {
    // Auto-generated string ID, uniquely identifying this record.
    string id = 1 [(core.field).type = ID];

    // Specifies the "object ID" for this hospital. It is unclear where this identifier comes from.
    string object_id = 2;
  }

  // Type of this facility, which also indicates the ownership/governance structure.
  enum FacilityType {
    // Unknown facility type.
    UNKNOWN_TYPE = 0;

    // The facility is owned, or operated (or both) by a government.
    GOVERNMENT = 1;

    // The facility is owned, or operated (or both) by a private company or corporation.
    PRIVATE = 2;

    // The facility is owned, or operated (or both) by a not-for-profit company, corporation, or organization.
    NON_PROFIT = 3;
  }

  // Specifies the general category which broadly identifies the type of facility described by this record. These
  // categories equate with NAICS codes. Each facility is assigned code, which is how this category is resolved for each
  // record when it is being written.
  enum FacilityCategory {
    // We do not know the category associated with a given record.
    UNKNOWN_CATEGORY = 0;
  }

  // Describes, in detail, the location of a given healthcare facility, in multiple representations to facilitate
  // querying (latitude/longitude, a set of geo-hashes with substrings corresponding to zoom tiers, and a text address
  // for display in UIs).
  message FacilityLocation {
    // Specifies the mailing/physical address for a given facility, structured as a regular postal address.
    message FacilityAddress {
      // Set of initial text lines for the address. These are to be used for 2-3-4-line addresses, ONLY. Please use the
      // structured fields as much as possible. The API may reject structured data presented in un-structured form.
      repeated string line = 1;

      // Two-letter ISO country code for the healthcare facility specified by this payload. Must be specified if
      // `province` is used instead of `state`. Example: "US" (not "USA").
      string country = 2;

      oneof territory {
        // State-or-province, as a generic (or ISO-defined) short (two-or-three letter) code. Example: "CA".
        string province = 3;

        // Specifies a U.S. State or outlying territory. Expected to be the two-character official code for the state
        // which is being referenced by this record.
        string us_state = 4;
      }

      // Specifies the county or other regional/local territory or jurisdiction within which this healthcare facility
      // resides or operates.
      string county = 5;

      // Name of the city which this healthcare facility is located in.
      string city = 6;

      // Zip or postal code for this facility's mailing address.
      string postal_code = 7;
    }

    // Latitude/longitude for the location. This is pre-computed from Google's geo-coding APIs.
    google.type.LatLng point = 1;

    // Set of substrings calculated from the geohash of the location specified by `point`, down to a two-character sized
    // bucket. These may be used to satisfy "closest to X" and other geo-aggregation queries.
    string hash = 2;

    // Specifies the physical/mailing address information for this facility. This should roughly match what is available
    // for the facility on Google/Apple maps. It may or may not be validated (see flag - `validated`).
    FacilityAddress address = 3;

    // Whether this address has been fully validated via available means (Google/Apple maps and other APIs).
    bool validated = 4;
  }

  // Specifies contact information for a given healthcare facility, based on the best information available. This may
  // include email addresses, phone numbers, websites, social media accounts, and so on.
  message FacilityContact {
    // Describes a phone number associated with a healthcare facility in some way.
    message FacilityPhone {
      // Describes the type of relation in place between a phone number and a healthcare facility.
      enum PhoneType {
        // Phone number type is unspecified.
        UNSPECIFIED_PHONE_TYPE = 0;

        // It's the main/only phone line known for the facility.
        MAIN = 1;

        // It's an emergency-room line.
        EMERGENCY = 2;

        // It's a public inquiries line.
        INQUIRIES = 3;
      }

      // Type of phone number listed in this record.
      PhoneType type = 1;

      // E164-formatted phone number, like "+11234567890" (for a U.S. number). This field is capable of storing
      // international numbers as supported/validated by `libphonenumber`.
      string e164 = 2;
    }

    // Describes a link between a social media account, of some kind, and a healthcare facility (perhaps the facility's
    // official Twitter account, or Facebook page).
    message FacilitySocial {
      // Describes common social networks supported for mapping accounts to healthcare facilities.
      enum SocialNetwork {
        // The network was unspecified or unrecognized.
        UNSPECIFIED_NETWORK = 0;

        // Official facility Twitter account.
        TWITTER = 1;

        // Official facility Facebook page.
        FACEBOOK = 2;
      }

      // Network to which this account belongs.
      SocialNetwork network = 1;

      // Username for this official account.
      string username = 2;

      // Link to follow or view this account.
      string uri = 3;
    }

    // Phone numbers for this facility.
    repeated FacilityPhone phone = 1;

    // Email addresses for this facility.
    repeated string email = 2;

    // Specifies a social media account for a given healthcare facility.
    repeated FacilitySocial social = 3;

    // Fully-qualified URLs to websites associated with this facility.
    repeated string website = 4;
  }

  // Specifies the capabilities for a given facility, at least those that are known to the system. This includes the
  // number of beds, whether the facility is enabled/equipped for trauma, and so on.
  message FacilityCapabilities {
    // Marked if the facility has a helipad.
    bool helipad = 1;

    // Marked if the facility is equipped for trauma.
    bool trauma = 2;

    // Number of regular beds in this facility.
    uint32 beds = 3;

    // Size of this hospital's ICU, by bed count, if known.
    uint32 icu = 4;

    // Total number of ventilators this facility has access to on a regular/normal basis.
    uint32 ventilators = 5;
  }

  // Auto-generated unique key for this facility, and other unique identifying details bound to this individual facility
  // record. Where applicable, some fields may be auto-generated (this will be noted in the docs).
  FacilityKey key = 1 [(core.field).type = KEY];

  // Describes the type of facility specified by this record.
  FacilityType type = 2;

  // Specifies the broad category assigned to classify this facility.
  FacilityCategory category = 3;

  // Display name for the facility.
  string name = 4;

  // Alternate names for this facility.
  repeated string alternate_name = 5;

  // Location details for this facility.
  FacilityLocation location = 6;

  // Contact information for this facility, potentially including email addresses, phone numbers,
  FacilityContact contact = 7;

  // `NAICS` code, for the facility, which describes the type of facility (in general terms). Stands for North American
  // Industry Classification System. Only present for US facilities. This code is further matched/resolved to produce
  // the `category` value assigned to this facility.
  string naics = 8;

  // Specifies the capabilities known to exist at this facility.
  FacilityCapabilities capabilities = 9;
}


// Specifies a crowd-sourced report, matched against a `Facility` record, which specifies information about the impact
// witnessed or experienced on that facility.
message Report {
  // Specifies a key which uniquely addresses a crowd-sourced report.
  message ReportKey {
    // Specifies an auto-generated ID for a given report.
    string id = 1 [(core.field).type = ID];

    // Specifies the parent facility record this report is regarding/related-to. Required.
    Facility.FacilityKey facility = 2 [(core.field).type = PARENT];
  }

  // Describes the source of a given report submission.
  message ReportSourcing {
    // Type of source for this report, as indicated by the reporter (honor system here).
    oneof source {
      // This report is detailing a witnessed, first-hand account.
      bool first_hand = 1;

      // This report is detailing a report received from another first-hand source.
      bool second_hand = 2;

      // This report is detailing something someone saw on social media. In this case, a link or description of the post
      // witnessed is required.
      bool social_media = 3;

      // This report is being submitted by a qualified healthcare professional.
      bool healthcare = 4;
    }

    // URI reference for this report.
    string uri = 5;

    // Narrative description of this report's source, if required/applicable.
    string description = 6;
  }

  // Specifies basic questions enclosed in the report.
  message ReportQuestions {
    // Specifies a critical resource for a given healthcare facility.
    enum FacilityResource {
      // The resource is not amongst the known/enumerated set and will be named in an arbitrary string label.
      OTHER_RESOURCE = 0;

      // Personal Protective Equipment (general category).
      PPE = 1;

      // N95-style protective masks.
      MASKS_N95 = 2;

      // Surgical-quality protective masks.
      MASKS_SURGICAL = 3;

      // Protective gloves.
      GLOVES = 4;

      // Protective gowns.
      GOWNS = 5;

      // Protective eyewear.
      EYEWEAR = 6;

      // Disposable boot-covers.
      BOOTIES = 7;

      // Protective face shields.
      FACE_SHIELDS = 8;

      // Cleaning supplies (general category).
      CLEANING_SUPPLIES = 21;

      // Hand sanitizer.
      SANITIZER = 22;

      // Sanitizing wipes.
      SANITIZING_WIPES = 23;

      // Equipment and provisions for actually conducting medical operations.
      MEDICAL_EQUIPMENT = 31;

      // Thermometers.
      THERMOMETERS = 32;

      // Breathing assistance apparatus/machines.
      VENTILATORS = 33;
    }

    // Details about a given facility's pressure on a given resource, enumerated in `FacilityResource`.
    message ResourcePressure {
      // Specifies the resource which is experiencing pressure.
      oneof resource {
        // Specifies a known resource, from the enumerated set at `FacilityResource`.
        FacilityResource known_resource = 1;

        // Specifies a label describing an "OTHER" selection for `FacilityResource`.
        string other_resource = 2;
      }

      // This facility is facing a shortage of these supplies.
      bool shortage = 3;

      // This facility is facing an increase in pressure on these supplies.
      bool pressure = 4;

      // Specifies a best-effort estimate for how long a given resource supply will last. Only available to be specified
      // in reports directly from healthcare professionals.
      google.protobuf.Duration supplies_for = 5;
    }

    // Specifies an estimate for the wait time experienced at the facility, as applicable.
    google.protobuf.Duration wait_time = 1;

    // This facility is facing a shortage.
    bool shortage = 2;

    // This facility is facing an increase in pressure.
    bool pressure = 3;

    // Only one of the following generic up/down change values is allowed at a time, and only if the user has submitted
    // a report before for this facility.
    oneof delta_estimate {
      // The situation is better than before.
      bool better = 4;

      // The situation is worse than before.
      bool worse = 5;
    }

    // Pressures applied to critical facility resources.
    repeated ResourcePressure resource = 6;
  }

  // Specifies the key associated with a given report, that uniquely distinguishes it.
  ReportKey key = 1 [(core.field).type = KEY];

  // Specifies a salted hash of the submitter's email address, so that their reports may be grouped/de-duped.
  string submitter = 2;

  // Source information for this report submission.
  ReportSourcing source = 3;

  // Reports answers to the survey questions submitted by the user as part of this report.
  ReportQuestions survey = 4;

  // Notes to apply to the report, in free-form, with limited support for Markdown-based formatting.
  string notes = 5;

  // Timestamp indicating when this record was last modified.
  google.protobuf.Timestamp modified = 6 [(core.field).stamp_update = true];

  // Timestamp indicating when this record was originally created.
  google.protobuf.Timestamp created = 7 [(core.field).stamp_create = true];
}


// Describes an individual facility, and stats to go along with them. Facility payload data may be withheld at the
// caller's option. For instance, after initially loading facilities, the caller may choose to only load stats to update
// or refresh a user interface.
message FacilityStats {
  // Describes the pin color to show for the hospital.
  enum PinColor {
    // The pin should show as gray - meaning, we have not received any data for this location.
    NEUTRAL = 0;

    // The location has received predominantly positive reports.
    GREEN = 1;

    // The location has received mixed reports.
    YELLOW = 2;

    // The location has received predominantly negative reports.
    RED = 3;
  }

  // Payload data for the facility in question. This may include only a key, if the user has elected to elide payload
  // data because they already have it.
  Facility facility = 1;

  // Color to show for the facility's pin.
  PinColor pin_color = 2;

  // Total count of reports for this facility, across all sources.
  uint32 report_count = 3;

  // Absolute count of "positive" reports for this facility.
  uint32 positive_reports = 4;

  // Absolute count of "negative" reports for this facility.
  uint32 negative_reports = 5;

  // Timestamp for the most recent report from this facility.
  google.protobuf.Timestamp most_recent = 6;
}


// Specifies a generic query for a set of records. These properties filter, offset, and otherwise mutate queries for
// whatever object the user is fetching.
message GenericQuery {
  // Specifies the record limit for the query. If none is sent, the default is set to `100`.
  uint32 limit = 1;

  // Specifies the record offset for the query, if applicable.
  uint32 offset = 2;

  // Latitude/longitude for a nearby-location query.
  google.type.LatLng nearby = 3;

  // Maximum zoom level to apply to the query, if a `nearby` value is specified.
  uint32 max_zoom = 4;
}


// Specifies a list of `Facility` records, usually produced by a query.
message FacilityList {
  // Specifies the set of facilities that match the input query.
  repeated Facility facility = 1;
}


// Describes the notion of a query for stats on a set of healthcare facilities, as currently known by the app.
message StatsQuery {
  // Generic query parameters.
  GenericQuery query = 1;

  // Flipped to `true` to withhold facility payload data.
  bool delta = 2;

  // Address to search around for health facilities. If specified, `query.nearby` cannot also be specified.
  string address = 3;
}


// Encapsulates a response that includes stats pre-calculated for each facility matching the input query.
message FacilityStatsList {
  // Describes stat results (and potentially facility payload data) for a matching set of facilities.
  repeated FacilityStats stanza = 1;
}


// Defines the main API that powers the COVID Impact Map application.
service App {
  option (google.api.default_host) = "rpc.covidmap.link";

  // Execute a simple health check against the `App` service. Perform any local logic needed to ensure the service is up
  // and ready to receive traffic. If the service is not ready, a regular protocol error will be returned - if it is,
  // the result is an empty successful response.
  rpc Health(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http).get = "/v1/health";
  }

  // Produce a list of known healthcare facilities, for which the COVID Impact Map tracker receives reports. This
  // dataset is a generic list of all known healthcare facilities that can be verified by COVID Impact Map devs.
  rpc Facilities(GenericQuery) returns (FacilityList) {
    option (google.api.http).get = "/v1/facilities";
  }

  // Describes a query to produce a set of facilities, with their associated stats. Query parameters are applied as
  // specified, stats are read (they are pre-calculated), and shuttled back to the client.
  rpc Stats(StatsQuery) returns (FacilityStatsList) {
    option (google.api.http).post = "/v1/stats";
  }
}
