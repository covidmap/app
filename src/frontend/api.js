
/*global goog*/
goog.module('covidmap.api');

const AppPromiseClient = goog.require('proto.covidmap.AppPromiseClient');
const Core = goog.require('gust.Core');
const Empty = goog.require('proto.google.protobuf.Empty');
const logging = goog.require('gust.logging');


/**
 * Refers to the API binding type assigned for our use.
 *
 * @public
 * @typedef {!AppPromiseClient}
 */
let AppAPIClient;


/**
 * Describes the RPC endpoint to use.
 *
 * @const
 * @type {!string}
 * @private
 */
const endpoint_ = `https://${window.location.hostname}`;


/**
 * Singleton client instance for the App API.
 *
 * @const
 * @type {!AppAPIClient}
 * @private
 */
const client_ = new AppPromiseClient(
    window.location.origin.indexOf(':8443') !== -1 ?
    `https://${window.location.hostname}:8443` :
    endpoint_, null, {});


/**
 * Empty proto singleton instance.
 *
 * @private
 * @const
 * @type {!Empty}
 */
const empty_ = new Empty();


/**
 * Base headers/gRPC metadata to apply to each and every RPC call, regardless of credential state.
 *
 * @const
 * @type {!Object<!string, *>}
 * @private
 */
const base_metadata_ = Object.seal({
  'X-API-Agent': `covidmap v1; gust ${Core.getGustVersion()}`
});


/**
 * API facade for the COVID Impact Map API. Mediates access to the underlying RPC code, generated by `protoc` and the
 * gRPC plugin for web code (`grpc-web`).
 *
 * @public
 */
class AppAPI {
  /**
   * Acquire an instance of the COVID Impact Map API client.
   *
   * @public
   * @return {!AppAPI} API instance for speaking to the COVID Map API.
   */
  static acquire() {
    return new AppAPI();
  }

  /**
   * Compose metadata to affix to an RPC request bound for the App API. Any data provided in `opt_overlay` (expected to
   * be an arbitrary object with string keys) is mixed-in to the standard headers before returning.
   *
   * @param {?Object<!string, *>=} opt_overlay Overlay data to apply to the returned metadata.
   * @returns {!Object<!string, *>} Merged headers to use as RPC metadata.
   */
  metadata(opt_overlay) {
    return Object.assign({}, opt_overlay || {}, base_metadata_);
  }

  /**
   * Retrieve the raw gRPC client.
   *
   * @public
   * @return {!AppAPIClient} gRPC client singleton.
   */
  client() {
    return client_;
  }

  /**
   * Ping the App API service. The resulting promise resolves then we get a valid response (which is empty). This method
   * may be used to measure latency to the service, or detect uptime changes.
   *
   * @public
   * @param {?Object<!string, *>=} opt_metadata Metadata to overlay into the RPC operation, if desired.
   * @return {!Promise<!number>} Promise for a future value, that resolves to the amount of latency it took to speak
   *   with the App API service backend.
   */
  ping(opt_metadata) {
    const start = +(new Date());
    logging.log('Kicking off ping...');
    const operation = client_.health(empty_, this.metadata(opt_metadata));
    return new Promise((proceed, reject) => {
      operation.then(() => {
        const total = +(new Date()) - start;
        logging.info('Ping completed in ' + total + 'ms.');
        proceed(total);

      }, (error) => {
        logging.error('Ping failed. Error enclosed.', error);
        reject(error);

      });
    });
  }
}


exports.AppAPI = AppAPI;
exports.AppAPIClient = AppAPIClient;
